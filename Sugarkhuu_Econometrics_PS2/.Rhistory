labs(x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=16, color="white", size=4)
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1.8, color="white", size=4)
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1, color="white", size=4)
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=-1, color="white", size=4)
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1.6, color="white", size=4)
mean = data$x_vals * data$y_vals
+ labs(title = "MAIN TITLE", x = "X-AXIS TITLE", y = "Y-AXIS TITLE")
mean
mean = data$x_vals * data$y_vals
mean = sum(data$x_vals * data$y_vals)
mean
(data$x_vals - mean)^2*data$y_vals
library(ggplot2)
data <- data.frame(x_vals = -1:3, y_vals = c(0.05,0.2,0.25,0.1,0.4))
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1.6, color="white", size=4)
x_mean  = sum(data$x_vals * data$y_vals)
x_var   = sum((data$x_vals - mean)^2*data$y_vals)
# Print outcome
sprintf('The mean of the variable is: %.2f', x_mean)
sprintf('The variance of the variable is: %.2f', x_var)
data$x_vals
# Drawing of pmf and calculation of mean and variance of the given random variable
library(ggplot2)
data <- data.frame(x_vals = -1:3, y_vals = c(0.05,0.2,0.25,0.1,0.4))
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1.6, color="white", size=4)
x_mean  = sum(data$x_vals * data$y_vals)
x_var   = sum((data$x_vals - mean)^2*data$y_vals)
# Print outcome
sprintf('The mean of the variable is: %.2f', x_mean)
sprintf('The variance of the variable is: %.2f', x_var)
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(title = 'pmf of X', x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1.6, color="white", size=4)
# This file contains a function for Monty hall problem and an example with 100000 draws for each strategy
monty_hall <- function(ifSwitch = FALSE) {
door_list = c(1,2,3)        # all doors as list
car_id    = sample(1:3,1)   # id of the door with car, Question 1
first_id  = sample(1:3,1)   # id of the door picked first, Question 2
# Question 3
# noCarNotPickedDoors - Doors with goat that were not picked first
noCarNotPickedDoors = setdiff(door_list, c(first_id,car_id)) # if first_id = car_id, then 2 doors, if not 1 door
goatOpen_id = if (length(noCarNotPickedDoors) == 1) noCarNotPickedDoors else sample(noCarNotPickedDoors,1)
# Strategies - Question 4 and 5
if (ifSwitch == FALSE){
second_id = first_id # No switch strategy, Question 4
} else {
second_id = setdiff(door_list, c(first_id,goatOpen_id)) # Switch strategy, Question 5
}
if (car_id == second_id) {
result = TRUE
} else {
result = FALSE
}
return(result)
}
# Testing the strategies, Question 6 - Demonstration
set.seed(1234) #setting the seed
times = 100000
# Stay
ifSwitch = FALSE
winTotal = 0
for (i in 1:times) {
winThis  = if (monty_hall(ifSwitch)) 1 else 0
winTotal = winTotal + winThis
}
winFracStay = winTotal/times
# Switch
ifSwitch = TRUE
winTotal = 0
for (i in 1:times) {
winThis  = if (monty_hall(ifSwitch)) 1 else 0
winTotal = winTotal + winThis
}
winFracSwitch = winTotal/times
# Print outcome
sprintf('Winning fraction of the Stay Strategy is: %.4f', winFracStay)
sprintf('Winning fraction of the Switch Strategy is: %.4f', winFracSwitch)
# Drawing of pmf and calculation of mean and variance of the given random variable
library(ggplot2)
data <- data.frame(x_vals = -1:3, y_vals = c(0.05,0.2,0.25,0.1,0.4))
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(title = 'pmf of X', x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1.6, color="white", size=4)
x_mean  = sum(data$x_vals * data$y_vals)
x_var   = sum((data$x_vals - mean)^2*data$y_vals)
# Print outcome
sprintf('The mean of the variable is: %.2f', x_mean)
sprintf('The variance of the variable is: %.2f', x_var)
# This file contains a function for Monty hall problem and an example with 100000 draws for each strategy
monty_hall <- function(ifSwitch = FALSE) {
door_list = c(1,2,3)        # all doors as list
car_id    = sample(1:3,1)   # id of the door with car, Question 1
first_id  = sample(1:3,1)   # id of the door picked first, Question 2
# Question 3
# noCarNotPickedDoors - Doors with goat that were not picked first
noCarNotPickedDoors = setdiff(door_list, c(first_id,car_id)) # if first_id = car_id, then 2 doors, if not 1 door
goatOpen_id = if (length(noCarNotPickedDoors) == 1) noCarNotPickedDoors else sample(noCarNotPickedDoors,1)
# Strategies - Question 4 and 5
if (ifSwitch == FALSE){
second_id = first_id # No switch strategy, Question 4
} else {
second_id = setdiff(door_list, c(first_id,goatOpen_id)) # Switch strategy, Question 5
}
if (car_id == second_id) {
result = TRUE
} else {
result = FALSE
}
return(result)
}
# Testing the strategies, Question 6 - Demonstration
set.seed(1234) #setting the seed
times = 100000
# Stay
ifSwitch = FALSE
winTotal = 0
for (i in 1:times) {
winThis  = if (monty_hall(ifSwitch)) 1 else 0
winTotal = winTotal + winThis
}
winFracStay = winTotal/times
# Switch
ifSwitch = TRUE
winTotal = 0
for (i in 1:times) {
winThis  = if (monty_hall(ifSwitch)) 1 else 0
winTotal = winTotal + winThis
}
winFracSwitch = winTotal/times
# Print outcome
sprintf('Winning fraction of the Stay Strategy is: %.4f', winFracStay)
sprintf('Winning fraction of the Switch Strategy is: %.4f', winFracSwitch)
# Drawing of pmf and calculation of mean and variance of the given random variable
library(ggplot2)
data <- data.frame(x_vals = -1:3, y_vals = c(0.05,0.2,0.25,0.1,0.4))
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(title = 'pmf of X', x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1.6, color="white", size=4)
x_mean  = sum(data$x_vals * data$y_vals)
x_var   = sum((data$x_vals - mean)^2*data$y_vals)
# Print outcome
sprintf('The mean of the variable is: %.2f', x_mean)
sprintf('The variance of the variable is: %.2f', x_var)
data$x_vals
data$x_vals - mean
# Drawing of pmf and calculation of mean and variance of the given random variable
library(ggplot2)
data <- data.frame(x_vals = -1:3, y_vals = c(0.05,0.2,0.25,0.1,0.4))
ggplot(data, aes(x=x_vals, y=y_vals)) +
geom_bar(stat='identity',width = 0.5) +
labs(title = 'pmf of X', x = "X", y = "P(X)") +
geom_text(aes(label=y_vals), vjust=1.6, color="white", size=4)
x_mean  = sum(data$x_vals * data$y_vals)
x_var   = sum((data$x_vals - x_mean)^2*data$y_vals)
# Print outcome
sprintf('The mean of the variable is: %.2f', x_mean)
sprintf('The variance of the variable is: %.2f', x_var)
dunif()
help(dunif())
help(dunif)
punif(0.5)
punif(0.6)
dunif(0.6)
dunif(0.7)
qunif(0.7)
qunif(0.75)
qunif(0.75,min=10,max=20)
punif(0.75,min=10,max=20)
punif(13,min=10,max=20)
dunif(13,min=10,max=20)
runif(13,min=10,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
runif(13,min=19,max=20)
getwd()
setdw("C:\Users\sugarkhuu\Documents\phd\bonn\phd21\econoPhD21\Sugarkhuu_Econometrics_PS2")
setdw("C:\\Users\sugarkhuu\Documents\phd\bonn\phd21\econoPhD21\Sugarkhuu_Econometrics_PS2")
setdw(r"C:\\Users\sugarkhuu\Documents\phd\bonn\phd21\econoPhD21\Sugarkhuu_Econometrics_PS2")
setdw(r"C:\\Users\sugarkhuu\Documents\phd\bonn\phd21\econoPhD21\Sugarkhuu_Econometrics_PS2")
x <- C:\Users\sugarkhuu\Documents\phd\bonn\phd21\econoPhD21\Sugarkhuu_Econometrics_PS2
x <- "C:\Users\sugarkhuu\Documents\phd\bonn\phd21\econoPhD21\Sugarkhuu_Econometrics_PS2"
x <- "C:\\Users\sugarkhuu\Documents\phd\bonn\phd21\econoPhD21\Sugarkhuu_Econometrics_PS2"
x <- "C:\\Users\\sugarkhuu\\Documents\\phd\\bonn\phd21\econoPhD21\\Sugarkhuu_Econometrics_PS2"
x <- "C:\\Users\\sugarkhuu\\Documents\\phd\\bonn\phd21\\econoPhD21\\Sugarkhuu_Econometrics_PS2"
x <- "C:/Users/sugarkhuu/Documents/phd/bonn//phd21/econoPhD21/Sugarkhuu_Econometrics_PS2"
setdw(x)
setwd(x)
source("~/phd/bonn/phd21/econoPhD21/Sugarkhuu_Econometrics_PS2/SugarkhuuRadnaa_Econometrics_PS2.R", echo=TRUE)
help(runif())
help(runif)
runif(100,0,2)
matrix(runif(100,0,2), ncol=20)
y <- matrix(runif(100,0,2), ncol=20)
y
len(y)
length(y)
size(y)
dim(y)
y <- matrix(runif(100000*100,0,2), ncol=100000)
y
dim(y)
dim(y) == 100 100000
matrix(runif(100,0,2), ncol=100)
mat <- matrix(runif(100000*100,0,2), ncol=100000)
apply(mat,2,max)
apply(mat,2,sum)
apply(mat,2,sum)
apply(mat,2,sum/100*2)
?rep
rep(1:4, 2)
apply(mat,2,function(x) 2*mean(x))
apply(mat,2,mean)
apply(mat,2,function(x) 2*mean(x))
sapply(mat, function(x) c(min = max(x), avg = 2*mean(x)))
apply(mat,2,max)
apply(mat,2,function(x) 2*mean(x))
apply(mat, function(x) c(min = max(x), avg = 2*mean(x)))
apply(mat, 2, function(x) c(min = max(x), avg = 2*mean(x)))
max_mean = apply(mat, 2, function(x) c(min = max(x), avg = 2*mean(x)))
max_mean$min
max_mean$avg
mat <- matrix(runif(100,0,2), ncol=1)
mat
max_mean = apply(mat, 2, function(x) c(min = max(x), avg = 2*mean(x)))
max_mean
max_mean["min"]
type(max_mean)
max_mean[1]
max_mean[2]
View(max_mean)
max_mean[min,1]
max_mean["min",1]
max_mean["avg",1]
max_mean = apply(mat, 2, function(x) c(max = max(x), avg2 = 2*mean(x)))
(max, avg2) = max_mean['min',1], max_mean['min',1]
(max, avg2) = max_mean['min',1], max_mean['avg2',1]
(max, avg2) = (max_mean['min',1], max_mean['avg2',1])
max  = max_mean['min', 1]
avg2 = max_mean['avg2', 1]
max  = max_mean['max', 1]
avg2 = max_mean['avg2', 1]
avg2
max
mat <- matrix(runif(100000*100,0,2), ncol=100000)
max_mean = apply(mat, 2, function(x) c(max = max(x), avg2 = 2*mean(x)))
max  = max_mean['max', 1]
avg2 = max_mean['avg2', 1]
max
avg2
avg2 = apply(mat, 2, avg2 = 2*mean(x))
max  = apply(mat, 2, max)
avg2 = apply(mat, 2, 2*mean)
max  = apply(mat, 2, max)
avg2 = apply(mat, 2, function(x) 2*mean(x))
avg2
est_max <- apply(mat, 2, max)
est_avg <- apply(mat, 2, function(x) 2*mean(x))
est_max
mean(est_max)
sd(est_max)
sd(est_avg)
mean(est_avg)
var(est_avg)
var(est_avg)^(0.5)
sapply(est_max, function(x) c(mean = mean(x), var = var(x)))
lapply(est_max, function(x) c(mean = mean(x), var = var(x)))
apply(est_max, function(x) c(mean = mean(x), var = var(x)))
apply(est_max,2, function(x) c(mean = mean(x), var = var(x)))
sapply(est_max, multiple.func)
multiple.func <- function(x) {
c(min = min(x), mean = mean(x), max = max(x))
}
sapply(est_max, multiple.func)
sapply(est_max, multiple.func)
est_max
c(mean(est_max), var(est_max))
mat <- matrix(, nrow = 15, ncol = n.columns)
mat <- matrix(, nrow = 2, ncol = 2)
mat
mat[1,:] <- c(mean(est_max), var(est_max))
mat[1,] <- c(mean(est_max), var(est_max))
mat
mat <- matrix(, nrow = 2, ncol = 2)
rownames(mat) <- c("max","avg")
colnames(mat) <- c("mean","var")
mat
mat[1,] <- c(mean(est_max), var(est_max))
mat[2,] <- c(mean(est_avg), var(est_avg))
mat
sam <- c(1,2)
var(sam)
?var
est_max
writ.csv(est_max,"est_max.csv")
write.csv(est_max,"est_max.csv")
mat
mat <- matrix(, nrow = 2, ncol = 2)
rownames(mat) <- c("max","avg")
colnames(mat) <- c("mean","bias","var")
mat[1,] <- c(mean(est_max),mean(est_max)-2,var(est_max))         # max estimates
mat[2,] <- c(mean(est_avg),mean(est_avg)-2,var(est_avg))         # avg*2 estimates
mat <- matrix(, nrow = 2, ncol = 3)
rownames(mat) <- c("max","avg")
colnames(mat) <- c("mean","bias","var")
mat[1,] <- c(mean(est_max),mean(est_max)-2,var(est_max))         # max estimates
mat[2,] <- c(mean(est_avg),mean(est_avg)-2,var(est_avg))         # avg*2 estimates
mat
mat <- matrix(runif(100000*100,0,2), ncol=100000) # 100X100,000 matrix of random samples from U(0,2)
est_max <- apply(mat, 2, max)                     # the estimate as the max from each sample
est_avg <- apply(mat, 2, function(x) 2*mean(x))   # the estimate as the 2 times the average of each sample
# summary matrix
mat <- matrix(, nrow = 2, ncol = 3)
rownames(mat) <- c("theta_bar","theta_hat")
colnames(mat) <- c("mean","bias","var")
mat[1,] <- c(mean(est_max),mean(est_max)-2,var(est_max))         # max estimates
mat[2,] <- c(mean(est_avg),mean(est_avg)-2,var(est_avg))         # avg*2 estimates
print(mat)
df <- read.table("cps09mar.xlsx", header = TRUE)
df <- read.xlsx("cps09mar.xlsx", header = TRUE)
df <- read_excel("cps09mar.xlsx", header = TRUE)
### Problem 2
library(readxl)
df <- read_excel("cps09mar.xlsx")
df
df.head
df.head()
mean(df$education)
apply(df,2,mean)
apply(df[,c("education","earnings")],2,mean)
apply(df[,c("education","earnings")],2,var)
attach(df)
detach(df)
attach(df)
apply(c(education,earnings),2,mean)
cov(education,earnings)
corr(education,earnings)
cor(education,earnings)
detach(df)
cor(education,earnings)
df
length(df)
length(df,2)
length(df,1)
nrow(df)
qt(c(.025, .975), df=nrow(df)-1)
qt(.95, df=nrow(df)-1)
qt(.995, df=nrow(df)-1)
t_995 <- qt(.995, df=nrow(df)-1)
t_95  <- qt(.95, df=nrow(df)-1)
t_995 <- qt(.005, df=nrow(df)-1)
t_95  <- qt(.05, df=nrow(df)-1)
t_95
t_995
t_95  <- qt(.95, df=nrow(df)-1)
t_995 <- qt(.995, df=nrow(df)-1)
tab <- matrix(, nrow = 2, ncol = 2)
rownames(tab) <- c("education","earnings")
colnames(tab) <- c("lower","upper")
tab
b[1,]
tab[1,]
tab["education",]
means
means <- apply(df[,c("education","earnings")],2,mean)
vars  <- apply(df[,c("education","earnings")],2,var)
means
means["education"]
t_95*c(-vars["education"]/(nrow(df)),vars["education"]/(nrow(df)))
means["education"] + t_95*c(-vars["education"]/(nrow(df)),vars["education"]/(nrow(df)))
tab["education",] <- means["education"] + t_95*c(-vars["education"]/(nrow(df)),vars["education"]/(nrow(df)))
tab
tab["education",] <- means["education"] +
t_95*c(-vars["education"]/(nrow(df)),vars["education"]/(nrow(df)))
tab["education",] <- means["education"] +
t_95*c(-vars["education"]/(nrow(df)),vars["education"]/(nrow(df)))
tab["earnings",] <- means["earnings"] +
t_995*c(-vars["earnings"]/(nrow(df)),vars["earnings"]/(nrow(df)))
tab
means
vars
c(-vars["earnings"]/(nrow(df)),vars["earnings"]/(nrow(df)))
vars["earnings"]/(nrow(df)
)
vars["earnings"]/nrow(df)
sqrt(vars["earnings"]/nrow(df))
c(-1,1)*sqrt(vars["earnings"]/nrow(df))
tab["education",] <- means["education"] +
t_95*c(-1,1)*sqrt(vars["education"]/nrow(df))
tab["earnings",] <- means["earnings"] +
t_995*c(-1,1)*sqrt(vars["earnings"]/nrow(df))
tab
means
sqrt(vars)
t_995
vars
t_95  <- qt(.95, df=nrow(df)-1)
t_995 <- qt(.995, df=nrow(df)-1)
tab <- matrix(, nrow = 2, ncol = 2)
rownames(tab) <- c("education90","earnings99")
colnames(tab) <- c("lower","upper")
tab["education90",] <- means["education"] +
t_95*c(-1,1)*sqrt(vars["education"]/nrow(df))
tab["earnings99",] <- means["earnings"] +
t_995*c(-1,1)*sqrt(vars["earnings"]/nrow(df))
tab
means <- apply(df[,c("education","earnings")],2,mean)
vars  <- apply(df[,c("education","earnings")],2,var)
means
var
vars
means
cov_edu_earn
attach(df)
cov_edu_earn <- cov(education,earnings)
cor_edu_earn <- cor(education,earnings)
detach(df)
cov_edu_earn
cor_edu_earn
t_95  <- qt(.95, df=nrow(df)-1)
t_995 <- qt(.995, df=nrow(df)-1)
tab <- matrix(, nrow = 2, ncol = 2)
rownames(tab) <- c("education90","earnings99")
colnames(tab) <- c("lower","upper")
tab["education90",] <- means["education"] +
t_95*c(-1,1)*sqrt(vars["education"]/nrow(df))
tab["earnings99",] <- means["earnings"] +
t_995*c(-1,1)*sqrt(vars["earnings"]/nrow(df))
tab
# summary matrix
mat <- matrix(, nrow = 2, ncol = 3)
mat <- matrix(nrow = 2, ncol = 3)
mat
raw_mat <- matrix(runif(100000*100,0,2), ncol=100000) # 100X100,000 matrix of random samples from U(0,2)
est_max <- apply(raw_mat, 2, max)                     # the estimate as the max from each sample
est_avg <- apply(raw_mat, 2, function(x) 2*mean(x))   # the estimate as the 2 times the average of each sample
# summary matrix
mat <- matrix(nrow = 2, ncol = 3)
rownames(mat) <- c("theta_hat","theta_bar")
colnames(mat) <- c("mean","bias","var")
mat["theta_hat",] <- c(mean(est_avg),mean(est_avg)-2,var(est_avg))         # avg*2 estimates
mat["theta_bar",] <- c(mean(est_max),mean(est_max)-2,var(est_max))         # max estimates
print(mat)
raw_mat <- matrix(runif(100000*100,0,2), ncol=100000) # 100X100,000 matrix of random samples from U(0,2)
est_max <- apply(raw_mat, 2, max)                     # the estimate as the max from each sample
est_avg <- apply(raw_mat, 2, function(x) 2*mean(x))   # the estimate as the 2 times the average of each sample
# summary matrix
mat <- matrix(nrow = 2, ncol = 3)
rownames(mat) <- c("theta_hat","theta_bar")
colnames(mat) <- c("mean","bias","var")
mat["theta_hat",] <- c(mean(est_avg),mean(est_avg)-2,var(est_avg))         # avg*2 estimates
mat["theta_bar",] <- c(mean(est_max),mean(est_max)-2,var(est_max))         # max estimates
print(mat)
library(readxl)
df <- read_excel("cps09mar.xlsx")
# (a)
means <- apply(df[,c("education","earnings")],2,mean)
vars  <- apply(df[,c("education","earnings")],2,var)
# (b)
attach(df)
cov_edu_earn <- cov(education,earnings)
cor_edu_earn <- cor(education,earnings)
detach(df)
# (c)
t_95  <- qt(.95, df=nrow(df)-1)
t_995 <- qt(.995, df=nrow(df)-1)
tab <- matrix(nrow = 2, ncol = 2)
rownames(tab) <- c("education90","earnings99")
colnames(tab) <- c("lower","upper")
tab["education90",] <- means["education"] +
t_95*c(-1,1)*sqrt(vars["education"]/nrow(df))
tab["earnings99",] <- means["earnings"] +
t_995*c(-1,1)*sqrt(vars["earnings"]/nrow(df))
tab
means
var
vars
means
cov()
covs
cov_edu_earn
